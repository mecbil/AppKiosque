{% set total = menus|length %}
{% set radius = 300 %}
{% set tiltX = -20 %}       {# Inclinaison verticale en degrés, négatif = vers le haut #}
{% set translateY = 10 %}   {# Décalage vertical en pixels pour recentrer le carousel #}

<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <title>Carrousel 3D Menu</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <style>
html, body {
  margin: 0;
  padding: 0;
  height: 100vh;
  width: 100vw;
  background: #222;
  color: white;
  font-family: Arial, sans-serif;
  overflow: hidden;
  user-select: none;
  display: flex;
  justify-content: center;
  align-items: center;
}

.scene {
  width: 100%;
  height: 100%;
  max-width: 600px;
  max-height: 400px;
  perspective: 1200px;
  cursor: grab;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0 auto;
}

.scene:active {
  cursor: grabbing;
}

.carousel {
  width: 600px;
  height: 400px;
  overflow: visible;
  position: relative;
  transform-style: preserve-3d;
  transition: transform 1s;
  /* Transformation initiale avec tiltX et translateY */
  transform: translateY({{ translateY }}px) translateZ(-{{ radius }}px) rotateX({{ tiltX }}deg) rotateY(0deg);
}

.carousel__cell {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 300px;     /* plus large */
  height: 150px;    /* moins haut */
  margin: -75px -150px; /* moitié de la hauteur et largeur pour centrer */
  border-radius: 15px;
  background-size: cover;
  background-position: center;
  box-shadow: 0 0 10px rgba(0,0,0,0.5);
  color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.3rem;
  font-weight: 600;
  user-select: none;
  transform-style: preserve-3d;
  transform-origin: center center;
}
  </style>
</head>
<body>

<div class="scene" id="scene">
  <div class="carousel" id="carousel">
    {% for menu in menus %}
      <div 
        class="carousel__cell" 
        style="
          transform: rotateY({{ (360 / total) * loop.index0 }}deg) translateZ({{ radius }}px);
          background-image: url('{{ vich_uploader_asset(menu, 'imageFile') }}');
        "
      >
        {{ menu.label }}
      </div>
    {% endfor %}
  </div>
</div>

<script>
  const scene = document.getElementById('scene');
  const carousel = document.getElementById('carousel');
  const total = {{ total }};
  const radius = {{ radius }};
  const tiltX = {{ tiltX }};
  const translateY = {{ translateY }};
  const step = 360 / total;
  let angle = 0;
  let isDragging = false;
  let startX = 0;
  let startTime = 0;
  let currentAngle = 0;

  // Clavier
  document.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowLeft') {
      angle += step;
    } else if (e.key === 'ArrowRight') {
      angle -= step;
    }
    currentAngle = angle;
    carousel.style.transition = 'transform 1s';
    carousel.style.transform = `translateY(${translateY}px) translateZ(-${radius}px) rotateX(${tiltX}deg) rotateY(${angle}deg)`;
  });

  // Souris
  scene.addEventListener('pointerdown', (e) => {
    isDragging = true;
    startX = e.clientX;
    startTime = Date.now();
    carousel.style.transition = 'none';
  });

  window.addEventListener('pointermove', (e) => {
    if (!isDragging) return;
    const deltaX = e.clientX - startX;
    const rotation = deltaX / 3;
    carousel.style.transform = `translateY(${translateY}px) translateZ(-${radius}px) rotateX(${tiltX}deg) rotateY(${currentAngle + rotation}deg)`;
  });

  window.addEventListener('pointerup', (e) => {
    if (!isDragging) return;
    isDragging = false;
    const deltaX = e.clientX - startX;
    const deltaTime = Date.now() - startTime;
    const velocity = deltaX / deltaTime;
    const inertia = velocity * 300;
    let totalRotation = (deltaX + inertia) / 3;
    currentAngle += totalRotation;
    currentAngle = Math.round(currentAngle / step) * step;
    carousel.style.transition = 'transform 1s';
    carousel.style.transform = `translateY(${translateY}px) translateZ(-${radius}px) rotateX(${tiltX}deg) rotateY(${currentAngle}deg)`;
  });

  // Tactile
  scene.addEventListener('touchstart', (e) => {
    if (e.touches.length !== 1) return;
    isDragging = true;
    startX = e.touches[0].clientX;
    startTime = Date.now();
    carousel.style.transition = 'none';
  }, { passive: true });

  scene.addEventListener('touchmove', (e) => {
    if (!isDragging || e.touches.length !== 1) return;
    const deltaX = e.touches[0].clientX - startX;
    const rotation = deltaX / 3;
    carousel.style.transform = `translateY(${translateY}px) translateZ(-${radius}px) rotateX(${tiltX}deg) rotateY(${currentAngle + rotation}deg)`;
  }, { passive: true });

  scene.addEventListener('touchend', (e) => {
    if (!isDragging) return;
    isDragging = false;
    const endX = e.changedTouches[0].clientX;
    const deltaX = endX - startX;
    const deltaTime = Date.now() - startTime;
    const velocity = deltaX / deltaTime;
    const inertia = velocity * 300;
    let totalRotation = (deltaX + inertia) / 3;
    currentAngle += totalRotation;
    currentAngle = Math.round(currentAngle / step) * step;
    carousel.style.transition = 'transform 1s';
    carousel.style.transform = `translateY(${translateY}px) translateZ(-${radius}px) rotateX(${tiltX}deg) rotateY(${currentAngle}deg)`;
  });
</script>

</body>
</html>
